/**
 * 
 */
package falstad;

import generation.Order;

import java.awt.event.KeyListener;
import java.io.File;
import java.util.Scanner;

import javax.swing.JFrame;
import javax.swing.JOptionPane;


/**
 * This class is a wrapper class to startup the Maze game as a Java application
 * 
 *
 * This code is refactored code from Maze.java by Paul Falstad, www.falstad.com, Copyright (C) 1998, all rights reserved
 * Paul Falstad granted permission to modify and use code for teaching purposes.
 * Refactored by Peter Kemper
 * 
 * TODO: use logger for output instead of Sys.out
 */
public class MazeApplication extends JFrame {

	// not used, just to make the compiler, static code checker happy
	private static final long serialVersionUID = 1L;

	private KeyListener kl ;

	//private MazeController controller ;
	private ManualDriver driver;
	private Wizard wizard;
	private WallFollower wallFollower;
	private Pledge pledge;
	private Explorer explorer;
	private BasicRobot basic;
	
	/**
	 * Constructor
	 */
	public MazeApplication() {
		super() ;
		System.out.println("MazeApplication: maze will be generated with a randomized algorithm.");
		this.driver = new ManualDriver();
		this.basic = new BasicRobot();
		this.driver.setRobot(this.basic);
		this.driver.controller = new MazeController(this.driver,this.basic);
		init() ;
	}
	/**
	 * Constructor that loads a maze from a given file or uses a particular method to generate a maze
	 */
	public MazeApplication(String parameter) {
		super() ;
		// scan parameters
		// Case 1: Prim
		if ("Prim".equalsIgnoreCase(parameter))
		{
			System.out.println("MazeApplication: generating random maze with Prim's algorithm");
			this.driver = new ManualDriver();
			this.basic = new BasicRobot();
			this.driver.setRobot(this.basic);
			this.driver.controller = new MazeController(this.driver, this.basic, Order.Builder.Prim) ;
			
			//this.driver.setRobot(basic);
			init() ;
			return ;
		}
		// Case 2: Eller
		// TODO: for P2 assignment, please add code for Eller's algorithm here
		if ("Eller".equalsIgnoreCase(parameter))
		{
			System.out.println("MazeApplication: generating random maze with Eller's algorithm");
			this.driver = new ManualDriver();
			this.basic = new BasicRobot();
			this.driver.setRobot(this.basic);
			this.driver.controller = new MazeController(this.driver, this.basic, Order.Builder.Prim);
			init() ;
			return ;
		}
		// Case 3: a file
		File f = new File(parameter) ;
		if (f.exists() && f.canRead())
		{
			System.out.println("MazeApplication: loading maze from file: " + parameter);
			this.driver = new ManualDriver();
			this.basic = new BasicRobot();
			this.driver.setRobot(this.basic);
			this.driver.controller = new MazeController(this.driver,this.basic, parameter) ;
			init();
			return ;
		}
		// Default case: 
		System.out.println("MazeApplication: unknown parameter value: " + parameter + " ignored, operating in default mode.");
		this.driver = new ManualDriver();
		this.basic = new BasicRobot();
		this.driver.setRobot(this.basic);
		this.driver.controller = new MazeController(this.driver, this.basic) ;
		
		
		init() ;
	}

	/**
	 * Initializes some internals and puts the game on display.
	 */
	private void init() {

		add(this.driver.controller.getPanel()) ;
		
		kl = new SimpleKeyListener(this, driver );
		addKeyListener(kl) ;
		
		setSize(400, 400) ;
		setVisible(true) ;
		
		// focus should be on the JFrame of the MazeApplication and not on the maze panel
		// such that the SimpleKeyListener kl is used
		setFocusable(true) ;
		
		this.driver.controller.init();
	}
	
	/**
	 * Main method to launch Maze as a java application.
	 * The application can be operated in two ways. The intended normal operation is to provide no parameters
	 * and the maze will be generated by a particular algorithm. If a filename is given, the maze will be loaded
	 * from that file. The latter option is useful for development to check particular mazes.
	 * @param args is optional, first parameter is a filename with a given maze
	 */
	public static void main(String[] args) {
		MazeApplication a ; 
		//Scanner scanner = new Scanner(System.in);
		
		String input = JOptionPane.showInputDialog(null,"Enter Algorithm (Prim, DFS, Eller):");
		switch (input) {
		case "Prim" : a = new MazeApplication(input);
		break ;
		case "Eller" :a = new MazeApplication(input);
		break;
		case "DFS":
		default : a = new MazeApplication() ;
		
		break ;
		}
		a.repaint() ;
		
	}

}
